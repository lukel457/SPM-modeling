The waterfall method is a thorough and concise timeline and plan to complete a project. It always starts with understanding the problem and the requirements needed to complete the task. Once the problem is defined, the coder begins building the design step by step. Here we have defined our modelling style and know we must build an outine.

CURSE will need the following things addressed over the prject timeline:
  1. Database of users (100 students, 10 faculty, 1 admin)
  2. Database of courses (CRN, course names, times, instructors)
  3. Three types of users (student – can register, can see available courses and their own schedule;
      instructor – can see available courses and their own course roster; admin – can see everything,
      can edit courses/users/schedules)
  4. Should include: multiple semesters, print-out of schedule, scheduling preferences

The waterfall process method is the process of working on and completing a project before ever releasing it to the customer.  In this method each step of the design process is completed sequentially with breaks for testing and revising.  The first step of this method is gathering requirements and stating specific functionalities of the program.  This is usually done by speaking with the customer to see what it is they need to be accomplished by the program.  In the case of the CURSE system the requirements that the customer would have would be a database of users, a database of courses, different user types, and various scheduling functionalities.  Based on the needs of the customer we now have specifics that the program needs to accomplish.  With this in mind we can make a basic model of our registration system.  The first step would be designing a database to hold all of the student/instructor/admin information such as name and registered classes.  Next a similar database would be created for classes and their respective information.  Next problem to solve would be having different types of users with different permissions.  This can be accomplished using inheritance from a base class to allow different permissions based on the public/private/protected functions and variables.  Finally a scheduling system needs to be fleshed out.  According to the customer the scheduling guidelines need to include preferences and checks for errors.  With all the requirements laid out we can begin the actual programming to accomplish these goals.  With each new addition to the program, tests can be run to verify the functionality of each module.  If the user database is completed but will only hold student objects and not instructor objects, the design of the database needs to be reevaluated.  After each module of the program is tested and found to be functional, all of the modules can be combined.  As before, tests need to be ran to verify that there were no errors caused when combining each part of the program.  If there are problems when combining the modules then we need to go back in the design process and start again to address these issues.  If the testing of the combined modules proves to be successful and meets all of the requirements of the customer, it can be released.  The customer will then use it in real situations and come back with feedback regarding bugs and or additional features that need to be added.  This could be considered the final product based on if the customer is satisfied.
