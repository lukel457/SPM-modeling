In an Incremental Model, the finer details are ignored, and preset sections of the project will be planned out based on functionality. In each phase, the program takes on a new high-level functionality that the last level did not possess. The number of incremental phases can be determined using the specs.

CURSE will need the following things addressed over the prject timeline:
  1. Database of users (100 students, 10 faculty, 1 admin)
  2. Database of courses (CRN, course names, times, instructors)
  3. Three types of users (student – can register, can see available courses and their own schedule;
      instructor – can see available courses and their own course roster; admin – can see everything,
      can edit courses/users/schedules)
  4. Should include: multiple semesters, print-out of schedule, scheduling preferences
  
  These specs can be broken down into 3 main parts; the databases, the user type structure, menu and basic functionality, and the extra functions for more complex work. These define the 3 versions of the project to follow.
  
  Version 1: A very basic system would be created first that will make student objects and allow them to sign up for classes.
    The first phase is the general structure of the program. The program is meant to schedule a semester for students as the most primary case, so the first phase should have a working GUI where a user can sign up for classes. This is the basic function and combines the first couple steps of the waterfall project into one with less detail. The programmer knows they will have to set up at least one DB to hold all the classes and most likely a separate one for generic users. A GUI will allow the user to choose a schedule if the classes do not overlap in time. At the end of each phase, the new functions are tested. Since this is the first phase, no regression testing is possible. The tests should include creating a generic user and being able to sign up for a schedule with limited error control. This would be a working preliminary design that can be elaborated on. 
    
  Version 2: Different classes will be made to allow different permissions.
    The second phase involves elaborating on the individual users. Instead of one generic user, it is known that 3 types of users are available: admin, student and teacher. Each user also comes with a set of available abilities that vary based on the user type. Therefore, I decided that all the classes are separate for the types. This will also prevent a student from having access to changing other student’s schedules because that function will only exist in the admin class. The programmer constructs 3 individual classes and the functions within each. An admin must be able to see all class sections and rosters as well as edit users, classes and schedules. The teacher must be able to see their own sections and rosters. Students will have functions to see classes, build a schedule and see it. To test, the programmer must now attempt to instantiate each user type and use their functions. Each function should form as a unit test that can progress into a full workflow. Regression testing will change as the generic user no longer exists. That class will most likely become the student class as it will have much of the same functionality, meaning the last test plan is obsolete.
    
  Version 3: Scheduling process including error checks, priority, and preference option. Also for adding the extra functions of the menu like printouts and multiple semesters.
    The third phase is implementing the finer functionality. The specs say that the schedules should be able to be printed out, so a function will be constructed to send a schedule to a file out to print. The student must also have a filter for the classes with time preferences and teacher preferences. Multiple semester of classes must be available, so the infrastructure must be added to select the semester when choosing classes and the database must be extended. Testing here will be easy since each one of these will function as its own unit test. Regression testing will have to be done to make sure none of the student, admin or teacher unit tests fail in the new version, breaking old stuff with the new stuff. 
